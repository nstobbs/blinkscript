kernel MandelbrotSet : ImageComputationKernel<ePixelWise>
{
    Image<eWrite> output; // Output Image 

    param:
        float4 WARM_COLOR;
        float4 COLD_COLOR;
        int MAX_ITER;
        float inputRange;
        float2 offset;

    local:
        float2 outputSize;
        float2 normalizedRange;
        float aspectRatio;
        float2 range;
        float2 normalizedOffset;
        float2 offsetDistance;

    void define(){

        defineParam(WARM_COLOR, "Warm Color", float4(1.5f, 1.0f, 0.5f, 0.0f));
        defineParam(COLD_COLOR, "Cold Color", float4(0.5f, 1.0f, 1.5f, 0.0f));
        defineParam(MAX_ITER, "Max Iteration", int(50));
        defineParam(inputRange, "Complex Plane Range", float(1.0f));
        defineParam(offset, "Offset Complex Plane", float2(0.0f, 0.0f));
    }

    void init(){

        outputSize.x = (float)output.bounds.width();
        outputSize.y = (float)output.bounds.height();

        aspectRatio = outputSize.x / outputSize.y;

        range.x = inputRange * aspectRatio;
        range.y = inputRange;

        normalizedRange.x = (range.x - (range.x * -1.0f)) / outputSize.x;
        normalizedRange.y = (range.y - (range.y * -1.0f)) / outputSize.y;

        normalizedOffset.x = offset.x * ((1.0f - (1.0f * -1.0f)) / outputSize.x);
        normalizedOffset.y = offset.y * (((1.0f * aspectRatio) - ((1.0f * aspectRatio) * -1.0f)) / outputSize.y);
        
        offsetDistance.x = (range.x / 2.0f) - normalizedOffset.x;
        offsetDistance.y = (range.y / 2.0f) - normalizedOffset.y;

    }

    void process(int2 pos){

        float u = 0.0f;
        float v = 0.0f;
        float u2 = u * u;
        float v2 = v * v;

        //TODO
        //Need to find a better way of dealing with transformations
        //We need to normalize the offset as well.
        //So that we don't have to deal with extreme values while zooming in
        float x = ((range.x * -1.0f)  + (pos.x * normalizedRange.x)) + offsetDistance.x;
        float y = ((range.y * -1.0f)  + (pos.y * normalizedRange.y)) + offsetDistance.y;

        int iterCount = 1;

        for(int k = 1; k < MAX_ITER && (u2 + v2 < 4.0); k++){

            iterCount++;
            v = 2 * u * v + y;
            u = u2 - v2 + x;
            u2 = u * u;
            v2 = v * v;
        }
        if (iterCount >= MAX_ITER) {

            float times = 0.0001f;

            float4 finalPixel;
            finalPixel.x = COLD_COLOR.x + (WARM_COLOR.x - COLD_COLOR.x) * times;
            finalPixel.y = COLD_COLOR.y + (WARM_COLOR.y - COLD_COLOR.y) * times;
            finalPixel.z = COLD_COLOR.z + (WARM_COLOR.z - COLD_COLOR.z) * times;
            finalPixel.w = 0.0f;
            output() = finalPixel;
            
        }
        else{

            float result = ((float)iterCount / (float)MAX_ITER);

            float4 finalPixel;
            finalPixel.x = COLD_COLOR.x + (WARM_COLOR.x - COLD_COLOR.x) * result;
            finalPixel.y = COLD_COLOR.y + (WARM_COLOR.y - COLD_COLOR.y) * result;
            finalPixel.z = COLD_COLOR.z + (WARM_COLOR.z - COLD_COLOR.z) * result;
            finalPixel.w = result;

            output() = finalPixel;
        }
    }
};
